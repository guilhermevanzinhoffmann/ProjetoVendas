// <auto-generated />
using System;
using ControleVendas.DBManager;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ControleVendas.Migrations
{
    [DbContext(typeof(SalesContext))]
    [Migration("20221222052256_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ControleVendas.Models.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DirectorID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("DirectorID")
                        .IsUnique();

                    b.ToTable("boards", (string)null);
                });

            modelBuilder.Entity("ControleVendas.Models.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("RoamingUnityId")
                        .HasColumnType("integer")
                        .HasColumnName("roaming_unity_id");

                    b.Property<int>("SellerID")
                        .HasColumnType("integer");

                    b.Property<int>("UnityID")
                        .HasColumnType("integer");

                    b.Property<float>("Value")
                        .HasColumnType("real")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("SellerID");

                    b.HasIndex("UnityID");

                    b.ToTable("sales", (string)null);
                });

            modelBuilder.Entity("ControleVendas.Models.Unity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BoardID")
                        .HasColumnType("integer");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("longitude");

                    b.Property<int>("ManagerID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("BoardID");

                    b.HasIndex("ManagerID")
                        .IsUnique();

                    b.ToTable("unities", (string)null);
                });

            modelBuilder.Entity("ControleVendas.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("seller")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ControleVendas.Models.Director", b =>
                {
                    b.HasBaseType("ControleVendas.Models.User");

                    b.Property<int>("BoardID")
                        .HasColumnType("integer");

                    b.ToTable("directors", (string)null);
                });

            modelBuilder.Entity("ControleVendas.Models.Manager", b =>
                {
                    b.HasBaseType("ControleVendas.Models.User");

                    b.Property<int>("UnityID")
                        .HasColumnType("integer");

                    b.ToTable("managers", (string)null);
                });

            modelBuilder.Entity("ControleVendas.Models.NationalDirector", b =>
                {
                    b.HasBaseType("ControleVendas.Models.User");

                    b.ToTable("nationaldirectors", (string)null);
                });

            modelBuilder.Entity("ControleVendas.Models.Seller", b =>
                {
                    b.HasBaseType("ControleVendas.Models.User");

                    b.Property<int>("UnityID")
                        .HasColumnType("integer");

                    b.HasIndex("UnityID");

                    b.ToTable("sellers", (string)null);
                });

            modelBuilder.Entity("ControleVendas.Models.Board", b =>
                {
                    b.HasOne("ControleVendas.Models.Director", "Director")
                        .WithOne("Board")
                        .HasForeignKey("ControleVendas.Models.Board", "DirectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");
                });

            modelBuilder.Entity("ControleVendas.Models.Sale", b =>
                {
                    b.HasOne("ControleVendas.Models.Seller", "Seller")
                        .WithMany("Sales")
                        .HasForeignKey("SellerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControleVendas.Models.Unity", "Unity")
                        .WithMany("Sales")
                        .HasForeignKey("UnityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Seller");

                    b.Navigation("Unity");
                });

            modelBuilder.Entity("ControleVendas.Models.Unity", b =>
                {
                    b.HasOne("ControleVendas.Models.Board", "Board")
                        .WithMany("Unities")
                        .HasForeignKey("BoardID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControleVendas.Models.Manager", "Manager")
                        .WithOne("Unity")
                        .HasForeignKey("ControleVendas.Models.Unity", "ManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("ControleVendas.Models.Director", b =>
                {
                    b.HasOne("ControleVendas.Models.User", null)
                        .WithOne()
                        .HasForeignKey("ControleVendas.Models.Director", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ControleVendas.Models.Manager", b =>
                {
                    b.HasOne("ControleVendas.Models.User", null)
                        .WithOne()
                        .HasForeignKey("ControleVendas.Models.Manager", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ControleVendas.Models.NationalDirector", b =>
                {
                    b.HasOne("ControleVendas.Models.User", null)
                        .WithOne()
                        .HasForeignKey("ControleVendas.Models.NationalDirector", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ControleVendas.Models.Seller", b =>
                {
                    b.HasOne("ControleVendas.Models.User", null)
                        .WithOne()
                        .HasForeignKey("ControleVendas.Models.Seller", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControleVendas.Models.Unity", "Unity")
                        .WithMany("Sellers")
                        .HasForeignKey("UnityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unity");
                });

            modelBuilder.Entity("ControleVendas.Models.Board", b =>
                {
                    b.Navigation("Unities");
                });

            modelBuilder.Entity("ControleVendas.Models.Unity", b =>
                {
                    b.Navigation("Sales");

                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("ControleVendas.Models.Director", b =>
                {
                    b.Navigation("Board")
                        .IsRequired();
                });

            modelBuilder.Entity("ControleVendas.Models.Manager", b =>
                {
                    b.Navigation("Unity")
                        .IsRequired();
                });

            modelBuilder.Entity("ControleVendas.Models.Seller", b =>
                {
                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
